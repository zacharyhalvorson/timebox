#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var component = require('..');
var Installer = require('component-installer');
var fs = require('fs');
var exists = fs.existsSync;
var write = fs.writeFileSync;
var utils = component.utils;
var log = utils.log;
var error = utils.error;
var fatal = utils.fatal;
var url = require('url');
var path = require('path');
var resolve = path.resolve;

/**
 * Options.
 */

program
  .usage('[name ...]')
  .option('-d, --dev', 'install development dependencies')
  .option('-r, --remotes <urls>', 'remotes to try installing from')
  .option('-f, --force', 'force installation even if previously installed')
  .option('-p, --proxy <proxy>', 'use a proxy, eg. http://localhost:3128')
  .option('-v, --verbose', 'verbose output')
  .parse(process.argv);

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install deps in ./component.json');
  console.log('    $ component install');
  console.log();
  console.log('    # install a single component');
  console.log('    $ component install component/tip');
  console.log();
  console.log('    # install several components');
  console.log('    $ component install component/tip component/popover');
  console.log();
  console.log('    # shell brace expansion ftw');
  console.log('    $ component install component/{tip,popover,dialog}');
  console.log();
  console.log('    # install a specific tag / sha');
  console.log('    $ component install component/tip@8bf1ffc3f');
  console.log();
  console.log('    # install regular & development deps in .');
  console.log('    $ component install -d');
  console.log();
});

/**
 * Local requires `component.json`.
 */

var local = !program.args.length;
var json = resolve('component.json');
var hasJson = exists(json);
if (local && !hasJson) fatal('missing component.json');
var conf = hasJson ? require(json) : {};

/**
 * Installer.
 */

var installer = new Installer(process.cwd());
var remotes = conf.remotes || [];

if (program.dev) installer.development();
if (program.proxy) installer.proxy(program.proxy);
if (program.remotes) remotes = program.remotes.split(',').concat(conf.remotes);
if (program.force) installer.force();

remotes.forEach(function(remote) {
  installer.remote(remote);
});

/**
 * Logging.
 */

console.log();

installer.on('package', report);

process.on('exit', function(){
  console.log();
});

/**
 * Install.
 */

if (local) {
  installer.install(function(err) {
    if (err) utils.fatal(err.message);
  });
} else {
  program.args.forEach(function(pkg) {
    var parts = pkg.split('@');
    var name = parts[0];
    var version = parts[1];
    installer.installPackage(name, version || 'master');
  });
}

/**
 * Report on a `pkg` as it's installed.
 *
 * @param {Package} pkg
 */

function report(pkg) {
  if (pkg.inFlight) return;
  log('install', pkg.slug);

  pkg.on('error', function(err){
    if (err.fatal) {
      error(err.message);
      process.exit(1);
    }
    utils.warn('warning', err.message);
  });

  if (program.verbose) {
    pkg.on('dep', function(dep){
      log('dep', dep.slug);
      report(dep);
    });

    pkg.on('file', function(file){
      log('fetch', pkg.name + ':' + file);
    });
  }

  pkg.on('exists', function(dep){
    if (program.verbose){
      log('exists', dep.slug);
    }
    saveToComponentJson();
  });

  pkg.on('end', function(){
    log('complete', pkg.name);

    saveToComponentJson();
  });

  function saveToComponentJson(){
    // save to ./component.json
    if (!local) {
      var key = program.dev ? 'development' : 'dependencies';
      conf[key] = conf[key] || {};
      conf[key][pkg.name] = pkg.version === 'master' ? '*' : pkg.version;
      if (hasJson) write(json, JSON.stringify(conf, null, 2));
    }
  }
}